Measures message
{
	"type": "measures",
	"payload": ??//wat message.measures nu is!
}

Domains message
{
	"type": "domains",
	"payload": ??//wat message.domains nu is!
}

UpdateDomains message
{
	"type": "updatedomains",
	"payload": ??//wat message.updatedomains nu is!
}

Refresh message
{
	"type": "refresh",
	"payload": {
		"id": id?//wat message.refresh nu is!
		"tiles": ??,//(optional)wat message.tiles nu is!
		"preview": ??,//(optional)wat message.preview nu is!
	}
}

UpdateLayer message
{
	"type": "updatelayer",
	"payload": {
		"id": ??//wat nu message.updatelayer.id is!
		"newobjects": ??,(optional)//wat message.updatelayer.newobjects nu is!
		"changedcolors": ??,//(optional) wat message.updatelayer.changedcolors nu is!
		"removedobjects": ??,//(optional) wat message.updatelayer.removedobjects nu is!
		"timestamp": ??//(optional) wat message.updatelayer.timestamp nu is!
	}
}

Update KPI message
{
	"type": "updatekpi",
	"payload": ??//wat message.updatekpi nu is!
}

Selected Objects message
{
	"type": "selectedobjects",
	"payload": ??//wat message.selectedObjects nu is!
}

Selected Objects Properties message
{
	"type": "selectedobjectsproperties",
	"payload": ??//wat message.selectedobjectsproperties nu is!
}

Session message
{
	"type": "session",
	"payload": ??//wat message.session nu is!
}

Login message
{
	"type": "login"
	//hier mag evt ook een lege payload
}

Connection message
{
	"type": "connection",
	"payload": ??//wat de message.connection nu is!
}

New Sensor message
{
	"type": "sensor",
	"payload": ??//wat message.sensor nu is!
}

New Complaint message
{
	"type": "complaint",
	"payload": ??//wat message.complaint nu is!
}

New Sensor Data message
{
	"type": "sensordata",
	"payload": ??//wat message.sensordata nu is!
}

New Wind Data message
{
	"type": "winddata",
	"payload": ??//wat message.winddata nu is!
}

Remove Complaint message
{
	"type": "removecomplaint",
	"payload": id//wat nu message.removecomplaint.complaintid is!
}

Remove Sensor message
{
	"type": "removesensor",
	"payload": id//wat nu message.removesensor.sensorid is!
}

Add History Measures message
{
	"type": "addhistorymeasures",
	"payload": ??//wat message.addhistorymeasures nu is!
}

Remove History Measures message
{
	"type": "removehistorymeasures",
	"payload": ??//wat message.removehistorymeasures nu is!
}

Add Cars message
{
	"type": "addcars", !!changed from addcar to addcars!!
	"payload": ??//wat message.addcar nu is!
}

Update Cars message
{
	"type": "updatecars", !!changed from updatecar to updatecars!!
	"payload": ??//wat message.updatecar nu is!
}

Remove Cars message
{
	"type": "removecars", !!changed from removecar to removecars!!
	"payload": ??//wat message.removecar nu is!
}

New GTU Sensor message
{
	"type": "newgtusensor",
	"payload": //not implemented
}

Update GTU Sensor message
{
	"type": "updategtusensor",
	"payload": //not implemented
}

New GTU Statistics message
{
	"type" "newgtustatistics",
	"payload": ??//wat nu message.newGTUstatistics is!
}

Update GTU Statistics message
{
	"type": "updategtustatistics",
	"payload": ??//wat nu message.updateGTUstatistics is!
}

Simulation Control message //note: speed can be combined with either start or stop. if both start and stop are defined the simulation will start!
{
	"type": "simulationcontrol",
	"payload": {
		"start": empty/true/whatever, //(optional) indicates simulation has started
		"stop": empty/true/whatever, //(optional) indicates simulation has stopped
		"speed": 0.1/0.2/0.5/1/2/5/10/20/50/100/200/500/1000/Double.MaxValue //(optional) indicates (change in) simulation speed
	}
}

Sync message
{
	"type": "cc",
	"group": "group",
	"payload": { //client to client communication, payload is handled in client, server only has to forward
	}
}

Sync Control message client 2 server
{
	"type": "synccontrol",
	"payload": {
		"presenter": "group" //sets this client as master of a new group with groupid;
		"viewer": "group" //sets this client as viewer of an existing groupid
	}
}

Sync Control message server 2 client
{
	"type": "synccontrol",
	"payload": {
		"succeeded": true/false, //says whether the request succeeded or not
		"presenter": "group" //request was with presenter/group combo
		"viewer": "group" //request was with viewer/group combo
	}
}

Model Control message
{	
	"type": "modelcontrol",
	"payload": {
		status: [ //zoveel new/delete/change messages als je door en met elkaar wil sturen!
			{new: {name: ...(string), status: ...(string), progress: ...(int), id: ...(string)}},
			{change: {name: ...(string), status: ...(string), progress: ...(int), id: ...(string)}},
			{delete: {id: ...}}
		]
	}
}